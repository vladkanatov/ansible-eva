---
- name: Stop service on all nodes
  become: true
  ansible.builtin.systemd:
    name: "{{ core_update_service_name }}"
    state: stopped

# Поиск пакета только на первом ноде
- name: Find installed package
  become: true
  ansible.builtin.find:
    paths: "{{ core_update_base_dir }}/Packages"
    patterns: "{{ core_update_package }}-*"
    file_type: file
  register: core_update_found_packages
  when: inventory_hostname == groups['core_cluster'][0]
  tags:
    - out_packages

# Извлекаем версию (если пакет найден)
- name: Extract installed version
  ansible.builtin.set_fact:
    core_update_installed_version: "{{ core_update_found_packages.files[0].path | basename | regex_replace('^' ~ core_update_package ~ '-', '') }}"
  when:
    - inventory_hostname == groups['core_cluster'][0]
    - core_update_found_packages.matched > 0
  tags:
    - out_packages

- name: Debug installed version
  ansible.builtin.debug:
    msg: "Installed version is: {{ core_update_installed_version }}"
  when: inventory_hostname == groups['core_cluster'][0]
  tags:
    - out_packages

- name: Update package if versions differ
  become: true
  ansible.builtin.command:
    cmd: "dotnet {{ core_update_base_dir }}/Launcher.dll pkg -s http://main.eacs.transset.ru update {{ core_update_package }} {{ version }}"
    creates: "{{ core_update_base_dir }}/Packages/{{ core_update_package }}-{{ version }}"
  when:
    - inventory_hostname == groups['core_cluster'][0]
    - core_update_installed_version.stdout != version

- name: Remove Packages directory on non-first nodes
  become: true
  ansible.builtin.file:
    path: "{{ core_update_base_dir }}/Packages"
    state: absent
  when: inventory_hostname != groups['core_cluster'][0]

- name: Copy Packages directory from first node to others
  become: true
  ansible.builtin.copy:
    src: "{{ core_update_base_dir }}/Packages/"
    dest: "{{ core_update_base_dir }}/Packages"
    remote_src: true
    mode: preserve
  delegate_to: "{{ groups['core_cluster'][0] }}"
  when: inventory_hostname != groups['core_cluster'][0]

- name: Verify rsync is installed
  become: true
  ansible.builtin.package:
    name: rsync
    state: present

- name: Restart service on all nodes
  become: true
  ansible.builtin.systemd:
    name: "{{ core_update_service_name }}"
    state: restarted
