---
- name: Stop service on all nodes
  become: true
  ansible.builtin.systemd:
    name: "{{ service_name }}"
    state: stopped

- name: Get currently installed package version
  become: true
  ansible.builtin.command: >
    ls {{ base_dir }}/Packages | grep "{{ package_name }}-" | awk -F'-' '{print $2}'
  register: installed_version
  changed_when: false
  ignore_errors: true
  when: inventory_hostname == groups['core_cluster'][0]

- name: Debug installed version
  ansible.builtin.debug:
    var: installed_version.stdout
  when: inventory_hostname == groups['core_cluster'][0]

- name: Update package if versions differ
  become: true
  ansible.builtin.command:
    cmd: "{{ base_dir }}/Launcher.dll pkg -s http://main.eacs.transset.ru update {{ package_name }} {{ version }}"
    creates: "{{ base_dir }}/Packages/{{ package_name }}-{{ version }}"
  when:
    - inventory_hostname == groups['core_cluster'][0]
    - installed_version.stdout != version

- name: Remove Packages directory on non-first nodes
  become: true
  ansible.builtin.file:
    path: "{{ base_dir }}/Packages"
    state: absent
  when: inventory_hostname != groups['core_cluster'][0]

- name: Copy Packages directory from first node to others
  become: true
  community.general.rsync:
    src: "{{ base_dir }}/Packages/"
    dest: "{{ base_dir }}/Packages"
    mode: pull
    delete: true
    archive: true
    compress: true
  delegate_to: "{{ groups['core_cluster'][0] }}"
  when: inventory_hostname != groups['core_cluster'][0]

- name: Verify rsync is installed
  become: true
  ansible.builtin.package:
    name: rsync
    state: present

- name: Restart service on all nodes
  become: true
  ansible.builtin.systemd:
    name: "{{ service_name }}"
    state: restarted
